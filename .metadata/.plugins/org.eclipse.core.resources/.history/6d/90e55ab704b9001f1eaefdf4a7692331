package com.edubridge.ServiceBookingPortal.configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig implements WebMvcConfigurer {

    // Security filter chain configuration for handling HTTP security
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF for simplicity (be cautious with this in production)
            .authorizeRequests(auth -> auth
                .requestMatchers("/public/**", "/login", "/signup", "/authenticate").permitAll() // Allow these endpoints
                .anyRequest().authenticated() // Require authentication for all other endpoints
            )
            .formLogin(form -> form
                .loginPage("/login") // Specify a custom login page
                .defaultSuccessUrl("/home", true) // Redirect to /home after successful login
                .permitAll() // Allow all users to access the login page
            )
            .logout(logout -> logout
                .logoutUrl("/logout") // Specify logout URL
                .logoutSuccessUrl("/login?logout") // Redirect after logout
                .permitAll() // Allow all users to logout
            );

        return http.build();
    }

    // Password encoder bean for encoding passwords
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // Use BCrypt for password encoding
    }

    // CORS configuration to allow Angular frontend to communicate with the backend
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:4200") // Allow Angular app
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // Allowed methods
                .allowedHeaders("*"); // Allow any headers
    }
}
