/*package com.edubridge.ServiceBookingPortal.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.edubridge.ServiceBookingPortal.dto.AuthenticationRequest;
import com.edubridge.ServiceBookingPortal.dto.SignupRequestDTO;
import com.edubridge.ServiceBookingPortal.dto.UserDto;
import com.edubridge.ServiceBookingPortal.services.authentication.AuthentService;



@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/auth")
public class AuthenticationController {

    private final AuthentService authentService;

    @Autowired
    public AuthenticationController(AuthentService authentService) {
        this.authentService = authentService;
    }

    @PostMapping("/client/sign-up")
    public ResponseEntity<?> signupClient(@Valid @RequestBody SignupRequestDTO signupRequestDTO) {
        try {
            if (authentService.presentByEmail(signupRequestDTO.getEmail())) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body("Client already exists with this Email!");
            }

            UserDto createdUser = authentService.signupClient(signupRequestDTO);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("An error occurred while signing up the client.");
        }
    }

    @PostMapping("/company/sign-up")
    public ResponseEntity<?> signupCompany(@Valid @RequestBody SignupRequestDTO signupRequestDTO) {
        try {
            if (authentService.presentByEmail(signupRequestDTO.getEmail())) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body("Company already exists with this Email!");
            }

            UserDto createdUser = authentService.signupCompany(signupRequestDTO);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("An error occurred while signing up the company.");
        }
    }

    @PostMapping("/authenticate")
    public ResponseEntity<?> authenticate(@Valid @RequestBody AuthenticationRequest authenticationRequest) {
        try {
            boolean isAuthenticated = authentService.authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());

            if (isAuthenticated) {
                return ResponseEntity.ok("Authentication Successful");
            } else {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Incorrect username or password");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("An error occurred during authentication.");
        }
    }
}
*/