package com.edubridge.ServiceBookingPortal.configs;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class SimpleCorsFilter implements Filter {

	@Value("${app.client.url") // Default to Angular dev server
	private String clientAppUrl = "";

	public SimpleCorsFilter() {

	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
			throws IOException, ServletException {
		HttpServletResponse response = (HttpServletResponse) res;
		HttpServletRequest request = (HttpServletRequest) req;
		Map<String, String> map = new HashMap<>();

		String originHeader = request.getHeader("origin");

		/*
		 * // Allow specific client origin or fallback to configured client URL if
		 * (originHeader != null && originHeader.equals(clientAppUrl)) {
		 * response.setHeader("Access-Control-Allow-Origin", originHeader); } else {
		 * response.setHeader("Access-Control-Allow-Origin", clientAppUrl); }
		 */

		// Set common CORS headers
		response.setHeader("Access-Control-Allow-Origin", originHeader);
		response.setHeader("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE");
		response.setHeader("Access-Control-Max-Age", "3600");
		// response.setHeader("Access-Control-Allow-Headers", "Authorization,
		// Content-Type, X-Requested-With");
		// response.setHeader("Access-Control-Allow-Credentials", "true");
		response.setHeader("Access-Control-Allow-Headers", "*");

		// Handle preflight requests (OPTIONS)
		if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
			response.setStatus(HttpServletResponse.SC_OK);
			// Do not proceed with the filter chain for preflight requests
		} else {

			// Proceed with the filter chain for other requests
			chain.doFilter(req, res);
		}
	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// No initialization logic required
	}

	@Override
	public void destroy() {
		// No cleanup logic required
	}
}
