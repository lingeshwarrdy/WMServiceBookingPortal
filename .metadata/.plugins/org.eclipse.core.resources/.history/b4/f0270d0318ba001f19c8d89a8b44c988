package com.edubridge.ServiceBookingPortal.configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig implements WebMvcConfigurer {

    // Define a PasswordEncoder bean for hashing passwords (BCrypt is a good choice)
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF (recommended for stateless API)
            .cors() // Enable CORS
            .and()
            .authorizeRequests(auth -> auth
                .requestMatchers("/public/**", "/login", "/signup", "/authenticate").permitAll() // Public endpoints
                .anyRequest().authenticated() // Secure the rest of the endpoints
            )
            .formLogin(form -> form
                .loginPage("/login") // Login page
                .defaultSuccessUrl("/home", true) // Redirect after successful login
                .permitAll() // Allow access to login page
            )
            .logout(logout -> logout
                .logoutUrl("/logout") // Logout URL
                .logoutSuccessUrl("/login?logout") // Redirect to login page after logout
                .permitAll() // Allow everyone to access logout functionality
            );

        return http.build();
    }

    // CORS configuration to allow Angular frontend to communicate with the backend
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry
            .addMapping("/**")
            .allowedOrigins("http://localhost:4200") // Allow frontend URL
            .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // Allow common methods
            .allowedHeaders("*") // Allow all headers
            .allowCredentials(true); // Allow credentials (cookies, etc.)
    }
}
