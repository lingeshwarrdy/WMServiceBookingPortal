package com.edubridge.ServiceBookingPortal.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edubridge.ServiceBookingPortal.dto.AdDTO;
import com.edubridge.ServiceBookingPortal.dto.AuthenticationRequest;
import com.edubridge.ServiceBookingPortal.dto.SignupRequestDTO;
import com.edubridge.ServiceBookingPortal.dto.UserDto;
import com.edubridge.ServiceBookingPortal.services.authentication.AuthentService;
import com.edubridge.ServiceBookingPortal.services.company.CompanyService;

@CrossOrigin("http://localhost:4200")
@RestController
public class AuthenticationController {

    @Autowired
    private AuthentService authentService;

    @PostMapping("/client/sign-up")
    public ResponseEntity<?> signupClient(@RequestBody SignupRequestDTO signupRequestDTO) {
        if (authentService.presentByEmail(signupRequestDTO.getEmail())) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body("Client already exists with this Email!");
        }

        UserDto createdUser = authentService.signupClient(signupRequestDTO);
        return ResponseEntity.ok(createdUser);
    }

    @PostMapping("/company/sign-up")
    public ResponseEntity<?> signupCompany(@RequestBody SignupRequestDTO signupRequestDTO) {
        if (authentService.presentByEmail(signupRequestDTO.getEmail())) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body("Company already exists with this Email!");
        }

        UserDto createdUser = authentService.signupCompany(signupRequestDTO);
        return ResponseEntity.ok(createdUser);
    }

    @PostMapping("/authenticate")
    public ResponseEntity<?> authenticate(@RequestBody AuthenticationRequest authenticationRequest) {
        boolean isAuthenticated = authentService.authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());
        if (isAuthenticated) {
            return ResponseEntity.ok("Authentication Successful");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Incorrect username or password");
        }
    }
}

